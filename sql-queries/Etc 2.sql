
SELECT
m.gcn
,am.name as med_name
,am.med_name_id
,count(a.last_pbm_adjudication_timestamp_approved) as fills
from dwh.fact_order_item a
left join dwh.dim_user b on a.account_id=b.account_id
left join dwh.dim_ndc_hierarchy drg_ndc on a.last_claim_ndc_approved=drg_ndc.ndc
left join dwh.dim_gcn_seqno_hierarchy drg_gcn on drg_ndc.gcn_seqno=drg_gcn.gcn_seqno
left join fdb.RNDC14_NDC_MSTR mstr on a.last_claim_ndc_approved=mstr.ndc
left join medispan.mf2ndc ms on a.last_claim_ndc_approved=ms.ndc_upc_hri
left join transactional.available_med am on a.med_id=am.medid
left join transactional.med m on am.medid=m.medid
where a.last_pbm_adjudication_timestamp_approved is not null and ms.multi_source_code = 'Y' and am.type_description = 'brand' and am.name is not null and m.gcn is not null
group by 1,2,3


-- select * from dwh.dim_gcn_seqno_hierarchy;

-- SELECT
-- 	apr.*,
-- 	dgsh.generic_name_short,
-- 	dgsh.generic_name_long,
-- 	dgsh.gcn_symphony_2017_rank,
-- 	dgsh.dosage_form_desc,
-- 	dgsh.dosage_form_code_desc,
-- 	route_desc
-- FROM
-- 	mktg_dev.sdey_automated_pricing_recommendations  as apr 
-- LEFT OUTER JOIN
-- 	dwh.dim_gcn_seqno_hierarchy as dgsh
-- ON
-- 	apr.gcn = dgsh.gcn 
-- 	AND apr.med_id = dgsh.medid
-- ;


-- with multiple_prices as (
-- 	SELECT
-- 		gcn,
-- 		pharmacy_network_id,
-- 		count(DISTINCT trunc(unit_price,3)) as unit_prices,
-- 		count(DISTINCT trunc(dispensing_fee_margin,3)) as dfms
-- 	FROM
-- 		transactional.med_price
-- 	WHERE
-- 		ended_on is NULL
-- 		AND branded = 0 
-- 	GROUP BY
-- 		gcn,
-- 		pharmacy_network_id
-- 	HAVING
-- 		unit_prices > 2 or dfms >= 2 
-- )
-- select 
-- -- 	med_price.id,
-- 	dgsh.generic_name_short,
-- -- 	dmh.is_branded_price,
-- -- 	dmh.med_name,
-- 	mps.gcn,
-- 	med_price.gcn,
-- 	med_price.medid,
-- 	mps.pharmacy_network_id,
-- 	unit_price,
-- 	dispensing_fee_margin,
-- 	med_price.branded,
-- 	started_on,
-- 	ended_on
-- FROM
-- 	multiple_prices as mps
-- INNER JOIN
-- 	transactional.med_price as med_price
-- ON
-- 	mps.gcn = med_price.gcn
-- 	and mps.pharmacy_network_id = med_price.pharmacy_network_id
-- INNER JOIN
-- 	dwh.dim_gcn_seqno_hierarchy AS dgsh
-- ON
-- 	dgsh.medid = med_price.medid AND
-- 	dgsh.gcn = med_price.gcn
-- -- INNER JOIN
-- -- 	dwh.dim_medid_hierarchy AS dmh
-- -- ON
-- -- 	dmh.medid = med_price.medid 
-- WHERE
-- 	ended_on is NULL
-- 	AND branded = 0 
-- ORDER BY
-- 	mps.gcn;







-- SELECT
-- 	dgsh.gcn,
-- 	dgsh.gcn_seqno,
-- 	dgsh.gcn_symphony_2017_rank,
-- 	dgsh.gcn_symphony_2017_fills,
-- 	dgsh.strength,
-- 	dgsh.dosage_form_desc,
-- 	dgsh.generic_name_long,
-- 	CASE
-- 		when datamart.default_quantity = cmp1.quantity then 'Default'
-- 		when datamart.top_30ds_quantity = cmp1.quantity then '30 Day Qty'
-- 		when datamart.top_90ds_quantity = cmp1.quantity then '90 Day Qty'
-- 		else 'none'
-- 	END	AS quantity_type,
-- 	cmp1.quantity as quantity,
-- 	cmp1.price_min as price_min_new,
-- 	cmp1.walmart_min as walmart_new,
-- 	cmp1.cvs_min as cvs_new,
-- 	cmp1.walgreens_min as walgreens_new,
-- 	cmp1.rite_aid_min as riteaid_new,
-- 	cmp1.kroger_min as kroger_new,
-- 	cmp2.price_min as price_min_old,
-- 	cmp2.walmart_min as walmart_old,
-- 	cmp2.cvs_min as cvs_old,
-- 	cmp2.walgreens_min as walgreens_old,
-- 	cmp2.rite_aid_min as riteaid_old,
-- 	cmp2.kroger_min as kroger_old,
-- 	mp.dispensing_fee_margin,
-- 	mp.unit_price
-- FROM
-- 	(SELECT
-- 		gcn,
-- 		gcn_seqno,
-- 		gcn_symphony_2017_rank,
-- 		gcn_symphony_2017_fills,
-- 		strength,
-- 		dosage_form_desc,
-- 		generic_name_long,
-- 		medid
-- 	FROM
-- 		dwh.dim_gcn_seqno_hierarchy
-- 	WHERE
-- 		gcn_symphony_2017_rank < 1000) AS dgsh
-- INNER JOIN
-- 	transactional.med_price AS mp
-- ON
-- 	mp.gcn = dgsh.gcn
-- 	AND mp.medid = dgsh.medid
-- 	AND mp.pharmacy_network_id = 1
-- 	AND ended_on is NULL
-- INNER JOIN 
-- 	fifo.generic_price_portfolio_datamart AS datamart
-- ON
-- 	dgsh.gcn = datamart.gcn
-- 	AND dgsh.gcn_seqno = datamart.gcn_seqno
-- INNER JOIN 
-- 	(SELECT
-- 		gcn,
-- 		quantity,
-- 		MIN(price) price_min,
-- 		MIN(CASE WHEN pharmacy = 'walmart' THEN price ELSE 1000000000000 END) AS walmart_min,
-- 		MIN(CASE WHEN pharmacy = 'cvs' THEN price ELSE 1000000000000 END) AS cvs_min,
-- 		MIN(CASE WHEN pharmacy = 'walgreens' THEN price ELSE 1000000000000 END) AS walgreens_min,
-- 		MIN(CASE WHEN pharmacy = 'rite_aid' THEN price ELSE 1000000000000 END) AS rite_aid_min,
-- 		MIN(CASE WHEN pharmacy = 'kroger' THEN price ELSE 1000000000000 END) AS kroger_min
-- 	FROM
-- 		api_scraper_external.competitor_pricing	
-- 	WHERE
-- 		site != 'all'
-- 		AND geo != 'all'
-- 		AND pharmacy != 'all'
-- 		AND pharmacy != 'all_major'
-- 		AND pharmacy != 'all_preferred'
-- 		AND pharmacy != 'other_pharmacies'
-- 		AND site = 'goodrx'
-- 		AND date = '2019-12-05'
-- 	GROUP BY
-- 		1,2) AS cmp1
-- ON
-- 	dgsh.gcn = cmp1.gcn
-- 	AND (cmp1.quantity = datamart.default_quantity OR cmp1.quantity = datamart.top_30ds_quantity or cmp1.quantity = datamart.top_90ds_quantity )
-- INNER JOIN
-- 	(SELECT
-- 		gcn,
-- 		quantity,
-- 		MIN(price) price_min,
-- 		MIN(CASE WHEN pharmacy = 'walmart' THEN price ELSE 1000000000000 END) AS walmart_min,
-- 		MIN(CASE WHEN pharmacy = 'cvs' THEN price ELSE 1000000000000 END) AS cvs_min,
-- 		MIN(CASE WHEN pharmacy = 'walgreens' THEN price ELSE 1000000000000 END) AS walgreens_min,
-- 		MIN(CASE WHEN pharmacy = 'rite_aid' THEN price ELSE 1000000000000 END) AS rite_aid_min,
-- 		MIN(CASE WHEN pharmacy = 'kroger' THEN price ELSE 1000000000000 END) AS kroger_min
-- 	FROM
-- 		api_scraper_external.competitor_pricing	
-- 	WHERE
-- 		site != 'all'
-- 		AND geo != 'all'
-- 		AND pharmacy != 'all'
-- 		AND pharmacy != 'all_major'
-- 		AND pharmacy != 'all_preferred'
-- 		AND pharmacy != 'other_pharmacies'
-- 		AND site = 'goodrx'
-- 		AND date = '2019-10-31'
-- 	GROUP BY
-- 		1,2) AS cmp2		
-- ON
-- 	cmp1.gcn = cmp2.gcn	
-- 	AND cmp1.quantity = cmp2.quantity
-- ;




-- SELECT
-- 	date,
-- 	count(DISTINCT geo),
-- 	count(*)
-- FROM
-- 	api_scraper_external.competitor_pricing
-- WHERE
-- 	site != 'all'
-- 	AND geo != 'all'
-- 	AND pharmacy != 'all'
-- 	AND pharmacy != 'all_major'
-- 	AND pharmacy != 'all_preferred'
-- 	AND pharmacy != 'other_pharmacies'
-- 	AND site = 'goodrx'
-- 	AND date >= '2019-09-01'
-- group BY
-- 	1
-- ;
-- select pharmacy,count(*) as cnt from api_scraper_external.competitor_pricing where pharmacy not like '%all%' and date >= '2019-12-01' group by 1 order by cnt desc;
-- SELECT DISTINCT
-- 	gcn,
-- 	branded,
-- 	deleted,
-- 	started_on::timestamp::date,
-- 	CASE WHEN pharmacy_network_id IS NULL THEN
-- 		'edlp'
-- 	WHEN pharmacy_network_id = 1 THEN
-- 		'edlp'
-- 	WHEN pharmacy_network_id = 2 THEN
-- 		'bsd'
-- 	WHEN pharmacy_network_id = 3 THEN
-- 		'hd'
-- 	WHEN pharmacy_network_id >= 4 THEN
-- 		'quicksave'
-- 	ELSE
-- 		'unknown'
-- 	END AS pharmacy_network_name
-- FROM
-- 	transactional.med_price
-- WHERE
-- 	started_on::timestamp::date >= '2019-01-01';
-- SELECT
-- 	*
-- FROM
-- 	transactional.med_price
-- WHERE
-- -- 	started_on::timestamp::date = '2019-12-28';

-- SELECT
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', last_pbm_adjudication_timestamp_approved)::timestamp::date AS "fill date",
-- 	sum(1) AS fills
-- FROM
-- 	dwh.fact_order_item
-- WHERE fill_sequence IS NOT NULL
-- 	AND is_fraud = FALSE
-- 	AND CONVERT_TIMEZONE ('UTC', 'America/New_York', last_pbm_adjudication_timestamp_approved)::timestamp::date > '2019-12-20'
-- GROUP BY
-- 	1
-- order by 
-- 	1 DESC
-- 	;


-- SELECT
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date AS "fill date",
-- 	foi.pharmacy_network_name AS "phamramcy network name",
-- 	foi.med_id AS "med id",
-- 	foi.generic_medid AS "generic medid",
-- 	p_medid.med_name AS "purchased med name",
-- 	f_medid.med_name AS "filled med name",
-- 	p_gcn.generic_name_short AS "purchased generic name short",
-- 	f_gcn.generic_name_short AS "filled generic name short",
-- 	p_gcn.strength AS "purchased strength",
-- 	f_gcn.strength AS "filled strength",
-- 	p_gcn.gcn AS "purchased gcn",
-- 	p_gcn.gcn_seqno AS "purchased gcn seqno",
-- 	f_gcn.gcn AS "filled gcn",
-- 	f_gcn.gcn_seqno AS "filled gcn seqno",
-- 	CASE WHEN last_claim_days_supply_approved < 84 THEN
-- 		30
-- 	ELSE
-- 		90
-- 	END AS "days supply normalized",
-- 	CASE WHEN (coalesce(foi.last_claim_med_price_approved, 0) + coalesce(foi.last_claim_reimburse_program_discount_amount_approved, 0) - coalesce(foi.last_pricing_total_cost_approved, 0) - coalesce(foi.last_claim_wmt_true_up_amount_approved, 0) < 0.0) THEN
-- 		TRUE
-- 	ELSE
-- 		FALSE
-- 	END AS "is_negative_revenue_fill",
-- 	sum(1) AS fills,
-- 	count(DISTINCT foi.dw_user_id) AS "uniq users",
-- 	count(DISTINCT order_id) AS "uniq orders",
-- 	sum(coalesce(last_claim_med_price_approved, 0)::float + coalesce(last_claim_reimburse_program_discount_amount_approved, 0)::float) AS "gross revenue",
-- 	sum(coalesce(foi.last_claim_med_price_approved, 0) + coalesce(foi.last_claim_reimburse_program_discount_amount_approved, 0) - coalesce(foi.last_pricing_total_cost_approved, 0) - coalesce(foi.last_claim_wmt_true_up_amount_approved, 0)) AS "gross margin",
-- 	sum(last_claim_days_supply_approved) AS "total days supply"
-- FROM
-- 	dwh.fact_order_item foi
-- 	LEFT JOIN dwh.dim_user AS du ON foi.account_id = du.account_id
-- 		AND du.is_internal = FALSE
-- 		AND du.is_phantom = FALSE
-- 	LEFT JOIN dwh.dim_medid_hierarchy dmh ON foi.generic_medid = dmh.medid
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy p_gcn ON foi.gcn_seqno = p_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy f_gcn ON foi.last_claim_gcn_seqno_approved = f_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_medid_hierarchy p_medid ON foi.med_id = p_medid.medid -- medid for the med purchased in the order (e.g. med name)
-- 	LEFT JOIN dwh.dim_medid_hierarchy f_medid ON foi.last_claim_medid_approved = f_medid.medid -- info for the med actually filled (e.g. med name)
-- WHERE (foi.fill_sequence IS NOT NULL)
-- AND foi.is_fraud = FALSE
-- AND CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date >= '2019-12-01'
-- -- AND foi.last_pbm_adjudication_timestamp_approved + INTERVAL '120 day' >= CURRENT_DATE
-- GROUP BY
-- 	1,
-- 	2,
-- 	3,
-- 	4,
-- 	5,
-- 	6,
-- 	7,
-- 	8,
-- 	9,
-- 	10,
-- 	11,
-- 	12,
-- 	13,
-- 	14,
-- 	15,
-- 	16
-- order by "gross margin"
-- 	;
-- SELECT
-- -- 	date_trunc('day', CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)) AS fill_date,
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date AS fill_date,
-- 	foi.med_id AS purchased_medid,
-- 	foi.last_claim_medid_approved AS filled_medid,
-- 	p_medid.med_name AS purchased_med_name,
-- 	f_medid.med_name AS filled_med_name,
-- 	foi.gcn AS purchased_gcn,
-- 	foi.last_claim_gcn_approved AS filled_gcn,
-- 	p_gcn.generic_name_short AS purchased_generic_name_short,
-- 	f_gcn.generic_name_short AS filled_generic_name_short,
-- 	foi.quantity AS purchased_quantity,
-- 	foi.last_claim_quantity_approved AS filled_quantity,
-- 	foi.price AS purchased_price,
-- 	coalesce(last_claim_med_price_approved, 0)::float + coalesce(last_claim_reimburse_program_discount_amount_approved, 0)::float AS filled_price_paid_aka_realized_gross_revenue,
-- 	foi.pharmacy_network_id AS purchased_pharmacy_network_id,
-- 	CASE WHEN pharmacy_network_id IS NULL
-- 		OR pharmacy_network_id = 1 THEN
-- 		'EDLP'
-- 	WHEN pharmacy_network_id = 2 THEN
-- 		'BSD'
-- 	WHEN pharmacy_network_id = 3 THEN
-- 		'HD'
-- 	WHEN pharmacy_network_id = 4
-- 		OR pharmacy_network_id = 5 THEN
-- 		'quicksave'
-- 	ELSE
-- 		'NONE'
-- 	END AS purchased_pharmacy_network,
-- 	foi.last_claim_days_supply_approved AS filled_days_supply,
-- 	coalesce(last_pricing_total_cost_approved, 0)::float + coalesce(last_claim_wmt_true_up_amount_approved, 0)::float AS filled_ingredient_plus_dispensing_costs_aka_realized_cogs,
-- 	coalesce(last_claim_med_price_approved, 0)::float + coalesce(last_claim_reimburse_program_discount_amount_approved, 0)::float - coalesce(last_pricing_total_cost_approved, 0)::float - coalesce(last_claim_wmt_true_up_amount_approved, 0)::float AS realized_gross_profit,
-- 	coalesce(foi.order_medication_discount_amount, 0)::float + coalesce(foi.allocated_order_discount_amount, 0)::float + coalesce(foi.allocated_wallet_payment_amount, 0)::float AS filled_discounts
-- FROM
-- 	dwh.fact_order_item foi
-- 	LEFT JOIN dwh.dim_user du ON foi.account_id = du.account_id
-- 	-- i've also see a foi.dw_user_id = du.dw_user_id, should that be added?
-- 		AND du.is_internal = FALSE -- removes internal users
-- 		AND du.is_phantom = FALSE -- remove phantom users
-- 	LEFT JOIN dwh.dim_medid_hierarchy p_medid ON foi.med_id = p_medid.medid -- medid for the med purchased in the order (e.g. med name)
-- 	LEFT JOIN dwh.dim_medid_hierarchy f_medid ON foi.last_claim_medid_approved = f_medid.medid -- info for the med actually filled (e.g. med name)
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy p_gcn ON foi.gcn_seqno = p_gcn.gcn_seqno -- add’l info for med purchased on the order, (e.g. generic med name)
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy f_gcn ON foi.last_claim_gcn_seqno_approved = f_gcn.gcn_seqno -- add’l info for med actually filled, (e.g. generic med name)
-- WHERE
-- 	foi.is_fraud = FALSE
-- 	AND foi.last_pbm_adjudication_timestamp_approved IS NOT NULL
-- 	AND foi.quantity != foi.last_claim_quantity_approved
-- 	AND foi.gcn != foi.last_claim_gcn_approved
-- 	AND CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date >= '2019-01-01'
-- ;
-- SELECT
-- 	ms.gcn,
-- 	ms.medid,
-- 	ms.gcn_seqno,
-- 	ms.gcn_symphony_2017_rank,
-- 	ms.gcn_symphony_2017_fills,
-- 	ms.default_quantity,
-- 	ms.strength,
-- 	ms.dosage_form_desc,
-- 	ms.generic_name_long,
-- 	price.edlp_unit_price,
-- 	price.bsd_unit_price,
-- 	price.hd_unit_price,
-- 	price.quicksave_unit_price,
-- 	price.edlp_dispensing_fee_margin,
-- 	price.bsd_dispensing_fee_margin,
-- 	price.hd_dispensing_fee_margin,
-- 	price.quicksave_dispensing_fee_margin
-- FROM
-- 	(SELECT
-- 			d1.gcn,
-- 			d1.medid,
-- 			d1.gcn_seqno,
-- 			d1.gcn_symphony_2017_rank,
-- 			d1.gcn_symphony_2017_fills,
-- 			d2.default_quantity,
-- 			d1.strength,
-- 			d1.dosage_form_desc,
-- 			d1.generic_name_long
-- 		FROM
-- 			dwh.dim_gcn_seqno_hierarchy as d1
-- 		INNER JOIN
-- 			dwh.dim_medid_hierarchy as d2
-- 		ON
-- 			d1.medid = d2.medid
-- 			AND d1.gcn_seqno = d2.gcn_seqno) AS ms
-- INNER JOIN
-- 	(SELECT
-- 		gcn,
-- 		medid,
-- 		MAX(CASE WHEN pharmacy_network_id is null or pharmacy_network_id = 1 THEN med_price.unit_price ELSE 0 END  ) AS edlp_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 2 THEN med_price.unit_price ELSE 0 END  ) AS bsd_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 3 THEN med_price.unit_price ELSE 0 END  ) AS hd_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 4 THEN med_price.unit_price ELSE 0 END  ) AS quicksave_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id is null or pharmacy_network_id = 1 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS edlp_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 2 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS bsd_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 3 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS hd_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 4 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS quicksave_dispensing_fee_margin
-- 	FROM
-- 		transactional.med_price
-- 	WHERE
-- 		ended_on IS NULL
-- 	GROUP BY
-- 		gcn,medid) price
-- ON
-- 	ms.gcn = price.gcn
-- 	AND ms.medid = price.medid
-- ORDER BY
-- 	gcn_symphony_2017_rank ASC, ms.medid ASC
--
-- select mp.gcn,dgsh.gcn_seqno,started_on::timestamp::date,
--     case
--     	when pharmacy_network_id is null then 'edlp'
--         when pharmacy_network_id = 1 then 'edlp'
--         when pharmacy_network_id = 2 then 'bsd'
--         when pharmacy_network_id = 3 then 'hd'
--         when pharmacy_network_id = 4 then 'quicksave'
--         else 'unknown'
--     end as pharmacy_network_name
-- from transactional.med_price as mp
-- inner join dwh.dim_gcn_seqno_hierarchy as dgsh
-- on
-- 	mp.gcn = dgsh.gcn AND mp.medid = dgsh.medid
-- where
-- ended_on is null and
-- mp.gcn in ('10810',
-- '10857',
-- '16513',
-- '18010',
-- '18996',
-- '18996',
-- '25940',
-- '25940',
-- '26320',
-- '26322',
-- '26323',
-- '26324',
-- '26326',
-- '26327',
-- '47631',
-- '47632',
-- '26328',
-- '7221',
-- '31164',
-- '98921')
--
--
-- -- Peso Median
-- SELECT  AVG(1.0E * x)
-- FROM    (
--             SELECT  x,
--                     2 * ROW_NUMBER() OVER (ORDER BY x) - COUNT(*) OVER () AS y
--             FROM    @Foo
--         ) AS d
-- WHERE   y BETWEEN 0 AND 2
--
--
-- -- Peso Weighted Median
-- SELECT  SUM(1.0E * y) / SUM(1.0E * t)
-- FROM    (
--             SELECT  SUM(x) OVER (PARTITION BY x) AS y,
--                     2 * ROW_NUMBER() OVER (ORDER BY x) - COUNT(*) OVER () AS z,
--                     COUNT(*) OVER (PARTITION BY x) AS t
--             FROM    @Foo
--         ) AS d
-- WHERE   z BETWEEN 0 AND 2
-- -- select data,rank() over ( order by data), count(*) over (), 2 * rank() over ( order by data) - count(*) over () as y from mktg_dev.tmp

-- SELECT
-- 	data_name,
-- 	rank() OVER (ORDER BY data_name),
-- 	data_count,
-- 	100 * sum(data_count) OVER (ORDER BY data_name ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / sum(data_count) OVER ()
-- FROM
-- 	mktg_dev.tmp_1;

-- SELECT
-- 	*
-- FROM
-- 	transactional.med_price AS mp
-- 	JOIN dwh.dim_gcn_seqno_hierarchy AS dgsh ON mp.gcn = dgsh.gcn
-- 		AND mp.medid = dgsh.medid
-- WHERE
-- 	started_on >= '2019-12-28'
-- 	AND ended_on IS NULL
-- 	AND branded = 0
-- 	AND pharmacy_network_id = 1;

-- SELECT
-- 	*
-- FROM
-- 	transactional.med_price
-- WHERE
-- 	started_on >= '2019-12-01'
-- -- 	AND gcn = 57902
-- -- 	AND medid = 170033
-- 	AND pharmacy_network_id = 1
-- 	AND started_on<>ended_on
-- 	AND branded = 0
-- ORDER BY
-- 	started_on DESC;

-- SELECT
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date AS "fill date",
-- 	sum(1) AS fills
-- FROM
-- 	dwh.fact_order_item foi
-- 	LEFT JOIN dwh.dim_user AS du ON foi.account_id = du.account_id
-- 		AND du.is_internal = FALSE
-- 		AND du.is_phantom = FALSE
-- 	LEFT JOIN dwh.dim_medid_hierarchy dmh ON foi.generic_medid = dmh.medid
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy p_gcn ON foi.gcn_seqno = p_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy f_gcn ON foi.last_claim_gcn_seqno_approved = f_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_medid_hierarchy p_medid ON foi.med_id = p_medid.medid -- medid for the med purchased in the order (e.g. med name)
-- 	LEFT JOIN dwh.dim_medid_hierarchy f_medid ON foi.last_claim_medid_approved = f_medid.medid -- info for the med actually filled (e.g. med name)
-- WHERE (foi.fill_sequence IS NOT NULL)
-- AND foi.is_fraud = FALSE
-- AND CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date >= '2019-12-15'
-- -- AND foi.last_pbm_adjudication_timestamp_approved + INTERVAL '120 day' >= CURRENT_DATE
-- GROUP BY
-- 	1
-- order by 1 DESC
-- ;



-- SELECT
-- 	npc.*
-- FROM
-- 	drugs_etl.network_pricing_mac AS npc
-- 	JOIN dwh.dim_gcn_seqno_hierarchy AS dgsh ON npc.gcn_seqno = dgsh.gcn_seqno
-- WHERE
-- 	dgsh.gcn = 2326
-- 	AND end_date IS NULL
;

-- select * from dwh.dim_gcn_seqno_hierarchy;

-- SELECT
-- 	apr.*,
-- 	dgsh.generic_name_short,
-- 	dgsh.generic_name_long,
-- 	dgsh.gcn_symphony_2017_rank,
-- 	dgsh.dosage_form_desc,
-- 	dgsh.dosage_form_code_desc,
-- 	route_desc
-- FROM
-- 	mktg_dev.sdey_automated_pricing_recommendations  as apr 
-- LEFT OUTER JOIN
-- 	dwh.dim_gcn_seqno_hierarchy as dgsh
-- ON
-- 	apr.gcn = dgsh.gcn 
-- 	AND apr.med_id = dgsh.medid
-- ;


-- with multiple_prices as (
-- 	SELECT
-- 		gcn,
-- 		pharmacy_network_id,
-- 		count(DISTINCT trunc(unit_price,3)) as unit_prices,
-- 		count(DISTINCT trunc(dispensing_fee_margin,3)) as dfms
-- 	FROM
-- 		transactional.med_price
-- 	WHERE
-- 		ended_on is NULL
-- 		AND branded = 0 
-- 	GROUP BY
-- 		gcn,
-- 		pharmacy_network_id
-- 	HAVING
-- 		unit_prices > 2 or dfms >= 2 
-- )
-- select 
-- -- 	med_price.id,
-- 	dgsh.generic_name_short,
-- -- 	dmh.is_branded_price,
-- -- 	dmh.med_name,
-- 	mps.gcn,
-- 	med_price.gcn,
-- 	med_price.medid,
-- 	mps.pharmacy_network_id,
-- 	unit_price,
-- 	dispensing_fee_margin,
-- 	med_price.branded,
-- 	started_on,
-- 	ended_on
-- FROM
-- 	multiple_prices as mps
-- INNER JOIN
-- 	transactional.med_price as med_price
-- ON
-- 	mps.gcn = med_price.gcn
-- 	and mps.pharmacy_network_id = med_price.pharmacy_network_id
-- INNER JOIN
-- 	dwh.dim_gcn_seqno_hierarchy AS dgsh
-- ON
-- 	dgsh.medid = med_price.medid AND
-- 	dgsh.gcn = med_price.gcn
-- -- INNER JOIN
-- -- 	dwh.dim_medid_hierarchy AS dmh
-- -- ON
-- -- 	dmh.medid = med_price.medid 
-- WHERE
-- 	ended_on is NULL
-- 	AND branded = 0 
-- ORDER BY
-- 	mps.gcn;







-- SELECT
-- 	dgsh.gcn,
-- 	dgsh.gcn_seqno,
-- 	dgsh.gcn_symphony_2017_rank,
-- 	dgsh.gcn_symphony_2017_fills,
-- 	dgsh.strength,
-- 	dgsh.dosage_form_desc,
-- 	dgsh.generic_name_long,
-- 	CASE
-- 		when datamart.default_quantity = cmp1.quantity then 'Default'
-- 		when datamart.top_30ds_quantity = cmp1.quantity then '30 Day Qty'
-- 		when datamart.top_90ds_quantity = cmp1.quantity then '90 Day Qty'
-- 		else 'none'
-- 	END	AS quantity_type,
-- 	cmp1.quantity as quantity,
-- 	cmp1.price_min as price_min_new,
-- 	cmp1.walmart_min as walmart_new,
-- 	cmp1.cvs_min as cvs_new,
-- 	cmp1.walgreens_min as walgreens_new,
-- 	cmp1.rite_aid_min as riteaid_new,
-- 	cmp1.kroger_min as kroger_new,
-- 	cmp2.price_min as price_min_old,
-- 	cmp2.walmart_min as walmart_old,
-- 	cmp2.cvs_min as cvs_old,
-- 	cmp2.walgreens_min as walgreens_old,
-- 	cmp2.rite_aid_min as riteaid_old,
-- 	cmp2.kroger_min as kroger_old,
-- 	mp.dispensing_fee_margin,
-- 	mp.unit_price
-- FROM
-- 	(SELECT
-- 		gcn,
-- 		gcn_seqno,
-- 		gcn_symphony_2017_rank,
-- 		gcn_symphony_2017_fills,
-- 		strength,
-- 		dosage_form_desc,
-- 		generic_name_long,
-- 		medid
-- 	FROM
-- 		dwh.dim_gcn_seqno_hierarchy
-- 	WHERE
-- 		gcn_symphony_2017_rank < 1000) AS dgsh
-- INNER JOIN
-- 	transactional.med_price AS mp
-- ON
-- 	mp.gcn = dgsh.gcn
-- 	AND mp.medid = dgsh.medid
-- 	AND mp.pharmacy_network_id = 1
-- 	AND ended_on is NULL
-- INNER JOIN 
-- 	fifo.generic_price_portfolio_datamart AS datamart
-- ON
-- 	dgsh.gcn = datamart.gcn
-- 	AND dgsh.gcn_seqno = datamart.gcn_seqno
-- INNER JOIN 
-- 	(SELECT
-- 		gcn,
-- 		quantity,
-- 		MIN(price) price_min,
-- 		MIN(CASE WHEN pharmacy = 'walmart' THEN price ELSE 1000000000000 END) AS walmart_min,
-- 		MIN(CASE WHEN pharmacy = 'cvs' THEN price ELSE 1000000000000 END) AS cvs_min,
-- 		MIN(CASE WHEN pharmacy = 'walgreens' THEN price ELSE 1000000000000 END) AS walgreens_min,
-- 		MIN(CASE WHEN pharmacy = 'rite_aid' THEN price ELSE 1000000000000 END) AS rite_aid_min,
-- 		MIN(CASE WHEN pharmacy = 'kroger' THEN price ELSE 1000000000000 END) AS kroger_min
-- 	FROM
-- 		api_scraper_external.competitor_pricing	
-- 	WHERE
-- 		site != 'all'
-- 		AND geo != 'all'
-- 		AND pharmacy != 'all'
-- 		AND pharmacy != 'all_major'
-- 		AND pharmacy != 'all_preferred'
-- 		AND pharmacy != 'other_pharmacies'
-- 		AND site = 'goodrx'
-- 		AND date = '2019-12-05'
-- 	GROUP BY
-- 		1,2) AS cmp1
-- ON
-- 	dgsh.gcn = cmp1.gcn
-- 	AND (cmp1.quantity = datamart.default_quantity OR cmp1.quantity = datamart.top_30ds_quantity or cmp1.quantity = datamart.top_90ds_quantity )
-- INNER JOIN
-- 	(SELECT
-- 		gcn,
-- 		quantity,
-- 		MIN(price) price_min,
-- 		MIN(CASE WHEN pharmacy = 'walmart' THEN price ELSE 1000000000000 END) AS walmart_min,
-- 		MIN(CASE WHEN pharmacy = 'cvs' THEN price ELSE 1000000000000 END) AS cvs_min,
-- 		MIN(CASE WHEN pharmacy = 'walgreens' THEN price ELSE 1000000000000 END) AS walgreens_min,
-- 		MIN(CASE WHEN pharmacy = 'rite_aid' THEN price ELSE 1000000000000 END) AS rite_aid_min,
-- 		MIN(CASE WHEN pharmacy = 'kroger' THEN price ELSE 1000000000000 END) AS kroger_min
-- 	FROM
-- 		api_scraper_external.competitor_pricing	
-- 	WHERE
-- 		site != 'all'
-- 		AND geo != 'all'
-- 		AND pharmacy != 'all'
-- 		AND pharmacy != 'all_major'
-- 		AND pharmacy != 'all_preferred'
-- 		AND pharmacy != 'other_pharmacies'
-- 		AND site = 'goodrx'
-- 		AND date = '2019-10-31'
-- 	GROUP BY
-- 		1,2) AS cmp2		
-- ON
-- 	cmp1.gcn = cmp2.gcn	
-- 	AND cmp1.quantity = cmp2.quantity
-- ;




-- SELECT
-- 	date,
-- 	count(DISTINCT geo),
-- 	count(*)
-- FROM
-- 	api_scraper_external.competitor_pricing
-- WHERE
-- 	site != 'all'
-- 	AND geo != 'all'
-- 	AND pharmacy != 'all'
-- 	AND pharmacy != 'all_major'
-- 	AND pharmacy != 'all_preferred'
-- 	AND pharmacy != 'other_pharmacies'
-- 	AND site = 'goodrx'
-- 	AND date >= '2019-09-01'
-- group BY
-- 	1
-- ;
-- select pharmacy,count(*) as cnt from api_scraper_external.competitor_pricing where pharmacy not like '%all%' and date >= '2019-12-01' group by 1 order by cnt desc;
-- SELECT DISTINCT
-- 	gcn,
-- 	branded,
-- 	deleted,
-- 	started_on::timestamp::date,
-- 	CASE WHEN pharmacy_network_id IS NULL THEN
-- 		'edlp'
-- 	WHEN pharmacy_network_id = 1 THEN
-- 		'edlp'
-- 	WHEN pharmacy_network_id = 2 THEN
-- 		'bsd'
-- 	WHEN pharmacy_network_id = 3 THEN
-- 		'hd'
-- 	WHEN pharmacy_network_id >= 4 THEN
-- 		'quicksave'
-- 	ELSE
-- 		'unknown'
-- 	END AS pharmacy_network_name
-- FROM
-- 	transactional.med_price
-- WHERE
-- 	started_on::timestamp::date >= '2019-01-01';
-- SELECT
-- 	*
-- FROM
-- 	transactional.med_price
-- WHERE
-- 	started_on::timestamp::date = '2019-12-28';

SELECT
	CONVERT_TIMEZONE ('UTC', 'America/New_York', last_pbm_adjudication_timestamp_approved)::timestamp::date AS "fill date",
	sum(1) AS fills
FROM
	dwh.fact_order_item
WHERE fill_sequence IS NOT NULL
	AND is_fraud = FALSE
	AND CONVERT_TIMEZONE ('UTC', 'America/New_York', last_pbm_adjudication_timestamp_approved)::timestamp::date > '2019-12-20'
GROUP BY
	1
order by 
	1 DESC
	;


-- SELECT
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date AS "fill date",
-- 	foi.pharmacy_network_name AS "phamramcy network name",
-- 	foi.med_id AS "med id",
-- 	foi.generic_medid AS "generic medid",
-- 	p_medid.med_name AS "purchased med name",
-- 	f_medid.med_name AS "filled med name",
-- 	p_gcn.generic_name_short AS "purchased generic name short",
-- 	f_gcn.generic_name_short AS "filled generic name short",
-- 	p_gcn.strength AS "purchased strength",
-- 	f_gcn.strength AS "filled strength",
-- 	p_gcn.gcn AS "purchased gcn",
-- 	p_gcn.gcn_seqno AS "purchased gcn seqno",
-- 	f_gcn.gcn AS "filled gcn",
-- 	f_gcn.gcn_seqno AS "filled gcn seqno",
-- 	CASE WHEN last_claim_days_supply_approved < 84 THEN
-- 		30
-- 	ELSE
-- 		90
-- 	END AS "days supply normalized",
-- 	CASE WHEN (coalesce(foi.last_claim_med_price_approved, 0) + coalesce(foi.last_claim_reimburse_program_discount_amount_approved, 0) - coalesce(foi.last_pricing_total_cost_approved, 0) - coalesce(foi.last_claim_wmt_true_up_amount_approved, 0) < 0.0) THEN
-- 		TRUE
-- 	ELSE
-- 		FALSE
-- 	END AS "is_negative_revenue_fill",
-- 	sum(1) AS fills,
-- 	count(DISTINCT foi.dw_user_id) AS "uniq users",
-- 	count(DISTINCT order_id) AS "uniq orders",
-- 	sum(coalesce(last_claim_med_price_approved, 0)::float + coalesce(last_claim_reimburse_program_discount_amount_approved, 0)::float) AS "gross revenue",
-- 	sum(coalesce(foi.last_claim_med_price_approved, 0) + coalesce(foi.last_claim_reimburse_program_discount_amount_approved, 0) - coalesce(foi.last_pricing_total_cost_approved, 0) - coalesce(foi.last_claim_wmt_true_up_amount_approved, 0)) AS "gross margin",
-- 	sum(last_claim_days_supply_approved) AS "total days supply"
-- FROM
-- 	dwh.fact_order_item foi
-- 	LEFT JOIN dwh.dim_user AS du ON foi.account_id = du.account_id
-- 		AND du.is_internal = FALSE
-- 		AND du.is_phantom = FALSE
-- 	LEFT JOIN dwh.dim_medid_hierarchy dmh ON foi.generic_medid = dmh.medid
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy p_gcn ON foi.gcn_seqno = p_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy f_gcn ON foi.last_claim_gcn_seqno_approved = f_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_medid_hierarchy p_medid ON foi.med_id = p_medid.medid -- medid for the med purchased in the order (e.g. med name)
-- 	LEFT JOIN dwh.dim_medid_hierarchy f_medid ON foi.last_claim_medid_approved = f_medid.medid -- info for the med actually filled (e.g. med name)
-- WHERE (foi.fill_sequence IS NOT NULL)
-- AND foi.is_fraud = FALSE
-- AND CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date >= '2019-12-01'
-- -- AND foi.last_pbm_adjudication_timestamp_approved + INTERVAL '120 day' >= CURRENT_DATE
-- GROUP BY
-- 	1,
-- 	2,
-- 	3,
-- 	4,
-- 	5,
-- 	6,
-- 	7,
-- 	8,
-- 	9,
-- 	10,
-- 	11,
-- 	12,
-- 	13,
-- 	14,
-- 	15,
-- 	16
-- order by "gross margin"
-- 	;
-- SELECT
-- -- 	date_trunc('day', CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)) AS fill_date,
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date AS fill_date,
-- 	foi.med_id AS purchased_medid,
-- 	foi.last_claim_medid_approved AS filled_medid,
-- 	p_medid.med_name AS purchased_med_name,
-- 	f_medid.med_name AS filled_med_name,
-- 	foi.gcn AS purchased_gcn,
-- 	foi.last_claim_gcn_approved AS filled_gcn,
-- 	p_gcn.generic_name_short AS purchased_generic_name_short,
-- 	f_gcn.generic_name_short AS filled_generic_name_short,
-- 	foi.quantity AS purchased_quantity,
-- 	foi.last_claim_quantity_approved AS filled_quantity,
-- 	foi.price AS purchased_price,
-- 	coalesce(last_claim_med_price_approved, 0)::float + coalesce(last_claim_reimburse_program_discount_amount_approved, 0)::float AS filled_price_paid_aka_realized_gross_revenue,
-- 	foi.pharmacy_network_id AS purchased_pharmacy_network_id,
-- 	CASE WHEN pharmacy_network_id IS NULL
-- 		OR pharmacy_network_id = 1 THEN
-- 		'EDLP'
-- 	WHEN pharmacy_network_id = 2 THEN
-- 		'BSD'
-- 	WHEN pharmacy_network_id = 3 THEN
-- 		'HD'
-- 	WHEN pharmacy_network_id = 4
-- 		OR pharmacy_network_id = 5 THEN
-- 		'quicksave'
-- 	ELSE
-- 		'NONE'
-- 	END AS purchased_pharmacy_network,
-- 	foi.last_claim_days_supply_approved AS filled_days_supply,
-- 	coalesce(last_pricing_total_cost_approved, 0)::float + coalesce(last_claim_wmt_true_up_amount_approved, 0)::float AS filled_ingredient_plus_dispensing_costs_aka_realized_cogs,
-- 	coalesce(last_claim_med_price_approved, 0)::float + coalesce(last_claim_reimburse_program_discount_amount_approved, 0)::float - coalesce(last_pricing_total_cost_approved, 0)::float - coalesce(last_claim_wmt_true_up_amount_approved, 0)::float AS realized_gross_profit,
-- 	coalesce(foi.order_medication_discount_amount, 0)::float + coalesce(foi.allocated_order_discount_amount, 0)::float + coalesce(foi.allocated_wallet_payment_amount, 0)::float AS filled_discounts
-- FROM
-- 	dwh.fact_order_item foi
-- 	LEFT JOIN dwh.dim_user du ON foi.account_id = du.account_id
-- 	-- i've also see a foi.dw_user_id = du.dw_user_id, should that be added?
-- 		AND du.is_internal = FALSE -- removes internal users
-- 		AND du.is_phantom = FALSE -- remove phantom users
-- 	LEFT JOIN dwh.dim_medid_hierarchy p_medid ON foi.med_id = p_medid.medid -- medid for the med purchased in the order (e.g. med name)
-- 	LEFT JOIN dwh.dim_medid_hierarchy f_medid ON foi.last_claim_medid_approved = f_medid.medid -- info for the med actually filled (e.g. med name)
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy p_gcn ON foi.gcn_seqno = p_gcn.gcn_seqno -- add’l info for med purchased on the order, (e.g. generic med name)
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy f_gcn ON foi.last_claim_gcn_seqno_approved = f_gcn.gcn_seqno -- add’l info for med actually filled, (e.g. generic med name)
-- WHERE
-- 	foi.is_fraud = FALSE
-- 	AND foi.last_pbm_adjudication_timestamp_approved IS NOT NULL
-- 	AND foi.quantity != foi.last_claim_quantity_approved
-- 	AND foi.gcn != foi.last_claim_gcn_approved
-- 	AND CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date >= '2019-01-01'
-- ;
-- SELECT
-- 	ms.gcn,
-- 	ms.medid,
-- 	ms.gcn_seqno,
-- 	ms.gcn_symphony_2017_rank,
-- 	ms.gcn_symphony_2017_fills,
-- 	ms.default_quantity,
-- 	ms.strength,
-- 	ms.dosage_form_desc,
-- 	ms.generic_name_long,
-- 	price.edlp_unit_price,
-- 	price.bsd_unit_price,
-- 	price.hd_unit_price,
-- 	price.quicksave_unit_price,
-- 	price.edlp_dispensing_fee_margin,
-- 	price.bsd_dispensing_fee_margin,
-- 	price.hd_dispensing_fee_margin,
-- 	price.quicksave_dispensing_fee_margin
-- FROM
-- 	(SELECT
-- 			d1.gcn,
-- 			d1.medid,
-- 			d1.gcn_seqno,
-- 			d1.gcn_symphony_2017_rank,
-- 			d1.gcn_symphony_2017_fills,
-- 			d2.default_quantity,
-- 			d1.strength,
-- 			d1.dosage_form_desc,
-- 			d1.generic_name_long
-- 		FROM
-- 			dwh.dim_gcn_seqno_hierarchy as d1
-- 		INNER JOIN
-- 			dwh.dim_medid_hierarchy as d2
-- 		ON
-- 			d1.medid = d2.medid
-- 			AND d1.gcn_seqno = d2.gcn_seqno) AS ms
-- INNER JOIN
-- 	(SELECT
-- 		gcn,
-- 		medid,
-- 		MAX(CASE WHEN pharmacy_network_id is null or pharmacy_network_id = 1 THEN med_price.unit_price ELSE 0 END  ) AS edlp_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 2 THEN med_price.unit_price ELSE 0 END  ) AS bsd_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 3 THEN med_price.unit_price ELSE 0 END  ) AS hd_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 4 THEN med_price.unit_price ELSE 0 END  ) AS quicksave_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id is null or pharmacy_network_id = 1 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS edlp_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 2 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS bsd_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 3 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS hd_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 4 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS quicksave_dispensing_fee_margin
-- 	FROM
-- 		transactional.med_price
-- 	WHERE
-- 		ended_on IS NULL
-- 	GROUP BY
-- 		gcn,medid) price
-- ON
-- 	ms.gcn = price.gcn
-- 	AND ms.medid = price.medid
-- ORDER BY
-- 	gcn_symphony_2017_rank ASC, ms.medid ASC
--
-- select mp.gcn,dgsh.gcn_seqno,started_on::timestamp::date,
--     case
--     	when pharmacy_network_id is null then 'edlp'
--         when pharmacy_network_id = 1 then 'edlp'
--         when pharmacy_network_id = 2 then 'bsd'
--         when pharmacy_network_id = 3 then 'hd'
--         when pharmacy_network_id = 4 then 'quicksave'
--         else 'unknown'
--     end as pharmacy_network_name
-- from transactional.med_price as mp
-- inner join dwh.dim_gcn_seqno_hierarchy as dgsh
-- on
-- 	mp.gcn = dgsh.gcn AND mp.medid = dgsh.medid
-- where
-- ended_on is null and
-- mp.gcn in ('10810',
-- '10857',
-- '16513',
-- '18010',
-- '18996',
-- '18996',
-- '25940',
-- '25940',
-- '26320',
-- '26322',
-- '26323',
-- '26324',
-- '26326',
-- '26327',
-- '47631',
-- '47632',
-- '26328',
-- '7221',
-- '31164',
-- '98921')
--
--
-- -- Peso Median
-- SELECT  AVG(1.0E * x)
-- FROM    (
--             SELECT  x,
--                     2 * ROW_NUMBER() OVER (ORDER BY x) - COUNT(*) OVER () AS y
--             FROM    @Foo
--         ) AS d
-- WHERE   y BETWEEN 0 AND 2
--
--
-- -- Peso Weighted Median
-- SELECT  SUM(1.0E * y) / SUM(1.0E * t)
-- FROM    (
--             SELECT  SUM(x) OVER (PARTITION BY x) AS y,
--                     2 * ROW_NUMBER() OVER (ORDER BY x) - COUNT(*) OVER () AS z,
--                     COUNT(*) OVER (PARTITION BY x) AS t
--             FROM    @Foo
--         ) AS d
-- WHERE   z BETWEEN 0 AND 2
-- -- select data,rank() over ( order by data), count(*) over (), 2 * rank() over ( order by data) - count(*) over () as y from mktg_dev.tmp

SELECT
	data_name,
	rank() OVER (ORDER BY data_name),
	data_count,
	100 * sum(data_count) OVER (ORDER BY data_name ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) / sum(data_count) OVER ()
FROM
	mktg_dev.tmp_1;

-- SELECT
-- 	*
-- FROM
-- 	transactional.med_price AS mp
-- 	JOIN dwh.dim_gcn_seqno_hierarchy AS dgsh ON mp.gcn = dgsh.gcn
-- 		AND mp.medid = dgsh.medid
-- WHERE
-- 	started_on >= '2019-12-28'
-- 	AND ended_on IS NULL
-- 	AND branded = 0
-- 	AND pharmacy_network_id = 1;

-- SELECT
-- 	*
-- FROM
-- 	transactional.med_price
-- WHERE
-- 	started_on >= '2019-12-01'
-- -- 	AND gcn = 57902
-- -- 	AND medid = 170033
-- 	AND pharmacy_network_id = 1
-- 	AND started_on<>ended_on
-- 	AND branded = 0
-- ORDER BY
-- 	started_on DESC;

-- SELECT
-- 	CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date AS "fill date",
-- 	sum(1) AS fills
-- FROM
-- 	dwh.fact_order_item foi
-- 	LEFT JOIN dwh.dim_user AS du ON foi.account_id = du.account_id
-- 		AND du.is_internal = FALSE
-- 		AND du.is_phantom = FALSE
-- 	LEFT JOIN dwh.dim_medid_hierarchy dmh ON foi.generic_medid = dmh.medid
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy p_gcn ON foi.gcn_seqno = p_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_gcn_seqno_hierarchy f_gcn ON foi.last_claim_gcn_seqno_approved = f_gcn.gcn_seqno
-- 	LEFT JOIN dwh.dim_medid_hierarchy p_medid ON foi.med_id = p_medid.medid -- medid for the med purchased in the order (e.g. med name)
-- 	LEFT JOIN dwh.dim_medid_hierarchy f_medid ON foi.last_claim_medid_approved = f_medid.medid -- info for the med actually filled (e.g. med name)
-- WHERE (foi.fill_sequence IS NOT NULL)
-- AND foi.is_fraud = FALSE
-- AND CONVERT_TIMEZONE ('UTC', 'America/New_York', foi.last_pbm_adjudication_timestamp_approved)::timestamp::date >= '2019-12-15'
-- -- AND foi.last_pbm_adjudication_timestamp_approved + INTERVAL '120 day' >= CURRENT_DATE
-- GROUP BY
-- 	1
-- order by 1 DESC
-- ;



-- SELECT
-- 	npc.*
-- FROM
-- 	drugs_etl.network_pricing_mac AS npc
-- 	JOIN dwh.dim_gcn_seqno_hierarchy AS dgsh ON npc.gcn_seqno = dgsh.gcn_seqno
-- WHERE
-- 	dgsh.gcn = 2326
-- 	AND end_date IS NULL
;