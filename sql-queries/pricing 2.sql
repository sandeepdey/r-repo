


-- SELECT
-- 	ms.gcn,
-- 	ms.medid,
-- 	ms.gcn_seqno,
-- 	ms.gcn_symphony_2017_rank,
-- 	ms.gcn_symphony_2017_fills,
-- 	ms.default_quantity,
-- 	ms.strength,
-- 	ms.dosage_form_desc,
-- 	ms.generic_name_long,
-- 	price.edlp_unit_price,
-- 	price.bsd_unit_price,
-- 	price.hd_unit_price,
-- 	price.magiccard_berkshire_unit_price,
-- 	price.magiccard_heb_unit_price
-- 	price.edlp_dispensing_fee_margin,
-- 	price.bsd_dispensing_fee_margin,
-- 	price.hd_dispensing_fee_margin,
-- 	price.magiccard_berkshire_dispensing_fee_margin,
-- 	price.magiccard_heb_dispensing_fee_margin
-- FROM
-- 	(SELECT
-- 			d1.gcn,
-- 			d1.medid,
-- 			d1.gcn_seqno,
-- 			d1.gcn_symphony_2017_rank,
-- 			d1.gcn_symphony_2017_fills,
-- 			d2.default_quantity,
-- 			d1.strength,
-- 			d1.dosage_form_desc,
-- 			d1.generic_name_long
-- 		FROM
-- 			dwh.dim_gcn_seqno_hierarchy as d1
-- 		INNER JOIN
-- 			dwh.dim_medid_hierarchy as d2
-- 		ON
-- 			d1.medid = d2.medid 
-- 			AND d1.gcn_seqno = d2.gcn_seqno) AS ms
-- INNER JOIN
-- 	(SELECT
-- 		gcn,
-- 		medid,
-- 		MAX(CASE WHEN pharmacy_network_id is null or pharmacy_network_id = 1 THEN med_price.unit_price ELSE 0 END  ) AS edlp_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 2 THEN med_price.unit_price ELSE 0 END  ) AS bsd_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 3 THEN med_price.unit_price ELSE 0 END  ) AS hd_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 4 THEN med_price.unit_price ELSE 0 END  ) AS magiccard_berkshire_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id = 5 THEN med_price.unit_price ELSE 0 END  ) AS magiccard_heb_unit_price,
-- 		MAX(CASE WHEN pharmacy_network_id is null or pharmacy_network_id = 1 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS edlp_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 2 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS bsd_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 3 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS hd_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 4 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS magiccard_berkshire_dispensing_fee_margin,
-- 		MAX(CASE WHEN pharmacy_network_id = 5 THEN med_price.dispensing_fee_margin ELSE 0 END  ) AS magiccard_heb_dispensing_fee_margin
-- 	FROM
-- 		transactional.med_price
-- 	WHERE
-- 		ended_on IS NULL
-- 	GROUP BY
-- 		gcn,medid) price
-- ON
-- 	ms.gcn = price.gcn
-- 	AND ms.medid = price.medid
-- ORDER BY
-- 	gcn_symphony_2017_rank ASC, ms.medid ASC
-- 	

-- -- select mp.gcn,dgsh.gcn_seqno,started_on::timestamp::date,
-- --     case
-- --     	when pharmacy_network_id is null then 'edlp'
-- --         when pharmacy_network_id = 1 then 'edlp'
-- --         when pharmacy_network_id = 2 then 'bsd'
-- --         when pharmacy_network_id = 3 then 'hd'
-- --         when pharmacy_network_id = 4 then 'quicksave'
-- --         else 'unknown'
-- --     end as pharmacy_network_name
-- -- from transactional.med_price as mp 
-- -- inner join dwh.dim_gcn_seqno_hierarchy as dgsh
-- -- on 
-- -- 	mp.gcn = dgsh.gcn AND mp.medid = dgsh.medid
-- -- where 
-- -- ended_on is null and
-- -- mp.gcn in ('10810',
-- -- '10857',
-- -- '16513',
-- -- '18010',
-- -- '18996',
-- -- '18996',
-- -- '25940',
-- -- '25940',
-- -- '26320',
-- -- '26322',
-- -- '26323',
-- -- '26324',
-- -- '26326',
-- -- '26327',
-- -- '47631',
-- -- '47632',
-- -- '26328',
-- -- '7221',
-- -- '31164',
-- -- '98921')
-- 	
-- 	
-- -- Peso Median

-- -- SELECT  AVG(1.0E * x)
-- -- FROM    (
-- --             SELECT  x,
-- --                     2 * ROW_NUMBER() OVER (ORDER BY x) - COUNT(*) OVER () AS y
-- --             FROM    @Foo
-- --         ) AS d
-- -- WHERE   y BETWEEN 0 AND 2
-- -- 	
-- -- 		
-- -- -- Peso Weighted Median
-- -- SELECT  SUM(1.0E * y) / SUM(1.0E * t)
-- -- FROM    (
-- --             SELECT  SUM(x) OVER (PARTITION BY x) AS y,
-- --                     2 * ROW_NUMBER() OVER (ORDER BY x) - COUNT(*) OVER () AS z,
-- --                     COUNT(*) OVER (PARTITION BY x) AS t
-- --             FROM    @Foo
-- --         ) AS d
-- -- WHERE   z BETWEEN 0 AND 2


-- -- -- select data,rank() over ( order by data), count(*) over (), 2 * rank() over ( order by data) - count(*) over () as y from mktg_dev.tmp

-- -- select data_name, rank() over ( order by data_name) , data_count ,
-- -- 100*sum(data_count) over (order by data_name asc rows between UNBOUNDED PRECEDING and current row) / sum(data_count) over ()
-- -- from mktg_dev.tmp_1;